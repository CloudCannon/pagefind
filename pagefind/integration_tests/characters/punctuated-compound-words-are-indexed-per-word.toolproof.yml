name: Character Tests > Punctuated compound words are indexed per word
steps:
  - ref: ./background.toolproof.yml
  - step: I have a "public/hyphen/index.html" file with the content {html}
    html: >-
      <!DOCTYPE html><html
      lang="en"><head></head><body><p>beet-root</p></body></html>
  - step: I have a "public/period/index.html" file with the content {html}
    html: >-
      <!DOCTYPE html><html
      lang="en"><head></head><body><p>image.png</p></body></html>
  - step: I have a "public/camel/index.html" file with the content {html}
    html: >-
      <!DOCTYPE html><html
      lang="en"><head></head><body><p>WKWebVIEWComponent</p></body></html>
  - step: I have a "public/underscore/index.html" file with the content {html}
    html: >-
      <!DOCTYPE html><html
      lang="en"><head></head><body><p>Word_Boundaries</p></body></html>
  - step: I have a "public/slash/index.html" file with the content {html}
    html: >-
      <!DOCTYPE html><html
      lang="en"><head></head><body><p>sandwich/salad</p></body></html>
  - step: I have a "public/comma/index.html" file with the content {html}
    html: >-
      <!DOCTYPE html><html
      lang="en"><head></head><body><p>Cloud,Cannon</p></body></html>
  - macro: I run Pagefind
  - step: stdout should contain "Running Pagefind"
  - step: The file "public/pagefind/pagefind.js" should not be empty
  - step: I serve the directory "public"
  - step: In my browser, I load "/"
  - step: In my browser, I evaluate {js}
    js: >-
      let pagefind = await import("/pagefind/pagefind.js");


      let pages = [
          ...(await Promise.all((await pagefind.search("beet")).results.map(r => r.data()))),
          ...(await Promise.all((await pagefind.search("root")).results.map(r => r.data()))),
      ];


      document.querySelector('[data-result]').innerText = pages.map(p =>
      p.url).join(", ");
  - step: In my browser, the console should be empty
  - step: In my browser, I evaluate {js}
    js: |-
      let val = await toolproof.querySelector("[data-result]");
      toolproof.assert_eq(val.innerHTML, `/hyphen/, /hyphen/`);
  - step: In my browser, I evaluate {js}
    js: >-
      let pagefind = await import("/pagefind/pagefind.js");


      let pages = [
          ...(await Promise.all((await pagefind.search("image")).results.map(r => r.data()))),
          ...(await Promise.all((await pagefind.search("png")).results.map(r => r.data()))),
      ];


      document.querySelector('[data-result]').innerText = pages.map(p =>
      p.url).join(", ");
  - step: In my browser, the console should be empty
  - step: In my browser, I evaluate {js}
    js: |-
      let val = await toolproof.querySelector("[data-result]");
      toolproof.assert_eq(val.innerHTML, `/period/, /period/`);
  - step: In my browser, I evaluate {js}
    js: >-
      let pagefind = await import("/pagefind/pagefind.js");


      let pages = [
          ...(await Promise.all((await pagefind.search("WkWebVIEWComponent")).results.map(r => r.data()))),
          ...(await Promise.all((await pagefind.search("web")).results.map(r => r.data()))),
          ...(await Promise.all((await pagefind.search("component")).results.map(r => r.data()))),
      ];


      document.querySelector('[data-result]').innerText = pages.map(p =>
      p.url).join(", ");
  - step: In my browser, the console should be empty
  - step: In my browser, I evaluate {js}
    js: |-
      let val = await toolproof.querySelector("[data-result]");
      toolproof.assert_eq(val.innerHTML, `/camel/, /camel/, /camel/`);
  - step: In my browser, I evaluate {js}
    js: >-
      let pagefind = await import("/pagefind/pagefind.js");


      let pages = [
          ...(await Promise.all((await pagefind.search("word")).results.map(r => r.data()))),
          ...(await Promise.all((await pagefind.search("bound")).results.map(r => r.data()))),
      ];


      document.querySelector('[data-result]').innerText = pages.map(p =>
      p.url).join(", ");
  - step: In my browser, the console should be empty
  - step: In my browser, I evaluate {js}
    js: |-
      let val = await toolproof.querySelector("[data-result]");
      toolproof.assert_eq(val.innerHTML, `/underscore/, /underscore/`);
  - step: In my browser, I evaluate {js}
    js: >-
      let pagefind = await import("/pagefind/pagefind.js");


      let pages = [
          ...(await Promise.all((await pagefind.search("sandwich")).results.map(r => r.data()))),
          ...(await Promise.all((await pagefind.search("salad")).results.map(r => r.data()))),
      ];


      document.querySelector('[data-result]').innerText = pages.map(p =>
      p.url).join(", ");
  - step: In my browser, the console should be empty
  - step: In my browser, I evaluate {js}
    js: |-
      let val = await toolproof.querySelector("[data-result]");
      toolproof.assert_eq(val.innerHTML, `/slash/, /slash/`);
  - step: In my browser, I evaluate {js}
    js: >-
      let pagefind = await import("/pagefind/pagefind.js");


      let pages = [
          ...(await Promise.all((await pagefind.search("CloudCannon")).results.map(r => r.data()))),
          ...(await Promise.all((await pagefind.search("cloud")).results.map(r => r.data()))),
          ...(await Promise.all((await pagefind.search("cannon")).results.map(r => r.data()))),
      ];


      document.querySelector('[data-result]').innerText = pages.map(p =>
      p.url).join(", ");
  - step: In my browser, the console should be empty
  - step: In my browser, I evaluate {js}
    js: |-
      let val = await toolproof.querySelector("[data-result]");
      toolproof.assert_eq(val.innerHTML, `/comma/, /comma/, /comma/`);
