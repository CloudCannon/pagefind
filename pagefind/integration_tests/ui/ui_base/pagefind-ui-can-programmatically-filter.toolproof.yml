name: Base UI Tests > Pagefind UI can programmatically filter
steps:
  - ref: ./background.toolproof.yml
  - step: I have a "public/res-zero/index.html" file with the content {html}
    html: >-
      <!DOCTYPE html><html lang="en"><head></head><body><h1>title title
      title</h1></body></html>
  - step: I have a "public/res-one/index.html" file with the content {html}
    html: >-
      <!DOCTYPE html><html lang="en"><head></head><body><h1
      data-pagefind-filter="bucket:a">title res one</h1></body></html>
  - step: I have a "public/res-two/index.html" file with the content {html}
    html: >-
      <!DOCTYPE html><html lang="en"><head></head><body><h1
      data-pagefind-filter="bucket:b">title res two</h1></body></html>
  - step: I run "%pagefind_exec_path%"
  - step: stdout should contain "Running Pagefind"
  - step: The file "public/pagefind/pagefind.js" should not be empty
  - step: I serve the directory "public"
  - step: In my browser, I load "/"
  - step: In my browser, I evaluate {js}
    js: |-
      window.pui.triggerFilters({ "bucket": "a" });
      window.pui.triggerSearch("title");
  - step: In my browser, I evaluate {js}
    js: |-
      let val = await toolproof.querySelector(".pagefind-ui__result-link");
      toolproof.assert_eq(val.innerHTML, `title res one`);
  - step: In my browser, the console should be empty
  - step: In my browser, I evaluate {js}
    js: |-
      window.pui.triggerFilters({ "bucket": ["b"] });
      await toolproof.waitFor(() => /res two/.test(document.querySelector(".pagefind-ui__result-link")?.innerText));
  - step: In my browser, I evaluate {js}
    js: |-
      let val = await toolproof.querySelector(".pagefind-ui__result-link");
      toolproof.assert_eq(val.innerHTML, `title res two`);
  - step: In my browser, the console should be empty
