name: Result Scoring > Search results are ranked by word frequency
steps:
  - ref: ./background.toolproof.yml
  - step: In my browser, I evaluate {js}
    js: >-
      let pagefind = await import("/pagefind/pagefind.js");


      let search = await pagefind.search(`cat`);


      document.querySelector('[data-count]').innerText =
      `${search.results.length} result(s)`;

      let data = await Promise.all(search.results.map(result => result.data()));

      document.querySelector('[data-result]').innerText = data.map(d =>
      d.url).join(', ');
  - step: In my browser, the console should be empty
  - step: In my browser, I evaluate {js}
    js: |-
      let val = await toolproof.querySelector("[data-count]");
      toolproof.assert_eq(val.innerHTML, `2 result(s)`);
  - step: In my browser, I evaluate {js}
    js: |-
      let val = await toolproof.querySelector("[data-result]");
      toolproof.assert_eq(val.innerHTML, `/cat/, /dog/`);
  - step: In my browser, I evaluate {js}
    js: >-
      let pagefind = await import("/pagefind/pagefind.js");


      let search = await pagefind.search(`dog`);


      document.querySelector('[data-count]').innerText =
      `${search.results.length} result(s)`;

      let data = await Promise.all(search.results.map(result => result.data()));

      document.querySelector('[data-result]').innerText = data.map(d =>
      d.url).join(', ');
  - step: In my browser, the console should be empty
  - step: In my browser, I evaluate {js}
    js: |-
      let val = await toolproof.querySelector("[data-count]");
      toolproof.assert_eq(val.innerHTML, `2 result(s)`);
  - step: In my browser, I evaluate {js}
    js: |-
      let val = await toolproof.querySelector("[data-result]");
      toolproof.assert_eq(val.innerHTML, `/dog/, /cat/`);
